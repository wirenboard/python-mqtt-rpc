#!/usr/bin/env python3

import argparse
import json
import os
import pprint
import time
from urllib.parse import urlparse

import paho_socket
from jsonrpc.exceptions import JSONRPCError
from paho.mqtt import client as mqttclient

from mqttrpc.client import TimeoutError, MQTTRPCError, TMQTTRPCClient


def main():
    parser = argparse.ArgumentParser(description="Sample RPC client", add_help=False)
    parser.add_argument(
        "-b",
        "--broker_url",
        dest="broker_url",
        type=str,
        help="MQTT url",
        default="unix:///var/run/mosquitto/mosquitto.sock",
    )
    parser.add_argument("-d", "--driver", dest="driver", type=str, help="Driver name")
    parser.add_argument("-s", "--service", dest="service", type=str, help="Service name")
    parser.add_argument("-m", "--method", dest="method", type=str, help="Method name")
    parser.add_argument("-a", "--args", dest="args", type=json.loads, help="Method arguments")
    parser.add_argument("-t", "--timeout", dest="timeout", type=int, help="Timeout", default=10)
    args = parser.parse_args()

    url = urlparse(args.broker_url)
    client_id = "mqtt-rpc-client-%d" % os.getpid()
    if url.scheme == "mqtt-tcp":
        client = mqttclient.Client(client_id)
        if url.username:
            client.username_pw_set(url.username, url.password)
        client.connect(url.hostname, url.port)
    elif url.scheme == "unix":
        client = paho_socket.Client(client_id)
        client.sock_connect(url.path)
    else:
        print("Unkown mqtt url scheme")
        exit(1)
    client.loop_start()

    rpc_client = TMQTTRPCClient(client)
    client.on_message = rpc_client.on_mqtt_message

    try:
        resp = rpc_client.call(args.driver, args.service, args.method, args.args, args.timeout)
        pprint.pprint(resp)
    except MQTTRPCError as e:
        print("Error: %s" % e)
    except TimeoutError:
        print("Request timed out")


if __name__ == "__main__":
    main()
