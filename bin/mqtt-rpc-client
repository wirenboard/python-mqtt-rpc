#!/usr/bin/env python3

import os
import json, time
import pprint
import argparse

from urllib.parse import urlparse
from paho.mqtt import client as mqttclient
from mqttrpc.client import TMQTTRPCClient
from jsonrpc.exceptions import JSONRPCError
import paho_socket


def main():
    parser = argparse.ArgumentParser(description="Sample RPC client", add_help=False)
    parser.add_argument(
        "-b", "--broker_url", dest="broker_url", type=str, help="MQTT url", default="unix:///var/run/mosquitto/mosquitto.sock"
    )
    parser.add_argument(
        "-d",
        "--driver",
        dest="driver",
        type=str,
        help="Driver name"
    )
    parser.add_argument(
        "-s",
        "--service",
        dest="service",
        type=str,
        help="Service name"
    )
    parser.add_argument(
        "-m",
        "--method",
        dest="method",
        type=str,
        help="Method name"
    )
    parser.add_argument(
        "-a", "--args", dest="args", type=json.loads, help="Method arguments"
    )
    parser.add_argument(
        "-t", "--timeout", dest="timeout", type=int, help="Timeout", default=10
    )
    args = parser.parse_args()

    url = urlparse(args.broker_url)
    client_id = "mqtt-rpc-client-%d" % os.getpid()
    if url.scheme == "mqtt-tcp":
        client = mqttclient.Client(client_id)
        if url.username:
            client.username_pw_set(url.username, url.password)
        client.connect(url.hostname, url.port)
    elif url.scheme == "unix":
        client = paho_socket.Client(client_id)
        client.sock_connect(url.path)
    else:
        print("Unkown mqtt url scheme")
        exit(1)
    client.loop_start()

    rpc_client = TMQTTRPCClient(client)
    client.on_message = rpc_client.on_mqtt_message

    resp = rpc_client.call(
        args.driver, args.service, args.method, args.args, args.timeout
    )
    pprint.pprint(resp)


if __name__ == "__main__":
    main()
